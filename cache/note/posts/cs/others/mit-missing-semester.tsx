import Anchor from "@/components/md/Anchor.vue";
import BlockCode from "@/components/md/BlockCode.vue";
import BlockMath from "@/components/md/BlockMath.vue";
import Delimiter from "@/components/md/Delimiter.vue";
import Fold from "@/components/md/Fold.vue";
import Grid from "@/components/md/Grid.vue";
import ImageCaptioned from "@/components/md/ImageCaptioned.vue";
import InlineMath from "@/components/md/InlineMath.vue";
import LinkCard from "@/components/md/LinkCard.vue";
import Note from "@/components/md/Note.vue";
import SVGCaptioned from "@/components/md/SVGCaptioned.vue";
import Tab from "@/components/md/Tab.vue";
import type { JSX } from "vue/jsx-runtime";
const jsx: JSX.Element = (<><p><strong>üìñ COURSE-STARTED-AT</strong>: 2023-11-5</p>
<p><strong>üîÆ COURSE-FINISHED-AT</strong>: 2023-11-11</p>
<p><strong>üîó COURSE-SITE</strong>: <Anchor href="https://missing.csail.mit.edu/">missing.csail.mit.edu</Anchor></p>
<hr />
<p>MIT Missing Semester is a course that teaches the <em>untaught</em> parts of computer science.</p>
<blockquote>
<p>Classes teach you all about advanced topics within CS, from operating systems to machine learning, but there‚Äôs one critical subject that‚Äôs rarely covered, and is instead left to students to figure out on their own: <strong>proficiency with their tools</strong>. We‚Äôll teach you how to master the command-line, use a powerful text editor, use fancy features of version control systems, and much more!</p>
<p><div class="right">‚Äî‚ÄîMIT Missing Semester</div></p>
</blockquote>
<p>For the parts I‚Äôm already familiar with, I skip them.</p>
<hr />
<h2 id="t" tabindex="-1" class="heading">Shell Scripting <a class="cursor header-anchor" href="#t">¬∂</a></h2>
<h3 id="t-2" tabindex="-1" class="heading">Variables <a class="cursor header-anchor" href="#t-2">¬∂</a></h3>
<p><strong>To define a variable</strong>: use <code class="inline-code">{"foo=bar"}</code> instead of <code class="inline-code">{"foo = bar"}</code>. The latter tries to run a command named <code class="inline-code">{"foo"}</code> with arguments <code class="inline-code">{"="}</code> and <code class="inline-code">{"bar"}</code>.</p>
<p><strong>To use a variable</strong>: use <code class="inline-code">{"$foo"}</code>.</p>
<p><strong>Special variables</strong>: (take <code class="inline-code">{"./script.sh foo bar"}</code> as an example)</p>
<ul>
<li><strong><code class="inline-code">{"$0"}</code></strong>: <code class="inline-code">{"./script.sh"}</code>, name of the script.</li>
<li><strong><code class="inline-code">{"$1"}</code> to <code class="inline-code">{"$9"}</code></strong>: <code class="inline-code">{"foo"}</code> to <code class="inline-code">{"bar"}</code>, arguments to the script.</li>
<li><strong><code class="inline-code">{"$@"}</code></strong>: <code class="inline-code">{"foo bar"}</code>, all arguments.</li>
<li><strong><code class="inline-code">{"$#"}</code></strong>: <code class="inline-code">{"2"}</code>, number of arguments.</li>
<li><strong><code class="inline-code">{"$?"}</code></strong>: Return code of the previous command.</li>
<li><strong><code class="inline-code">{"$$"}</code></strong>: PID of the current script.</li>
<li><strong><code class="inline-code">{"$_"}</code></strong>: Last argument of the last command.</li>
</ul>
<p><strong>Arithmetic</strong>: use <code class="inline-code">{"((x + y))"}</code> to do arithmetic. Use <code class="inline-code">{"$((x + y))"}</code> to use the result of the arithmetic. Comparisons like <code class="inline-code">{"((x >= y))"}</code> are also supported.</p>
<h3 id="t-3" tabindex="-1" class="heading">Operators <a class="cursor header-anchor" href="#t-3">¬∂</a></h3>
<p><strong>Operator <code class="inline-code">{"||"}</code>, <code class="inline-code">{"&&"}</code> and <code class="inline-code">{";"}</code></strong>:</p>
<ul>
<li><strong><code class="inline-code">{"foo || bar"}</code></strong> means ‚Äúrun <code class="inline-code">{"foo"}</code>, if it fails, run <code class="inline-code">{"bar"}</code>‚Äù.</li>
<li><strong><code class="inline-code">{"foo && bar"}</code></strong> means ‚Äúrun <code class="inline-code">{"foo"}</code>, if it succeeds, run <code class="inline-code">{"bar"}</code>‚Äù.</li>
<li><strong><code class="inline-code">{"foo ; bar"}</code></strong> means ‚Äúrun <code class="inline-code">{"foo"}</code>, then run <code class="inline-code">{"bar"}</code>‚Äù.</li>
</ul>
<p>Example:</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\"><span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Oops, fail\"</span>           <span class=\"token comment\"># Oops, fail</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Will not be printed\"</span>   <span class=\"token comment\">#</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Things went well\"</span>      <span class=\"token comment\"># Things went well</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Will not be printed\"</span>  <span class=\"token comment\">#</span>\n<span class=\"token boolean\">true</span> <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This will always run\"</span>   <span class=\"token comment\"># This will always run</span>\n<span class=\"token boolean\">false</span> <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This will always run\"</span>  <span class=\"token comment\"># This will always run</span>\n</code>"}></BlockCode><p><strong>Command substitution</strong>: use <code class="inline-code">{"$(foo)"}</code> to run <code class="inline-code">{"foo"}</code> and use its output as a string. Example: <code class="inline-code">{"for file in $(ls)"}</code> iterates over all files.</p>
<p><strong>Process substitution</strong>: <code class="inline-code">{"<(foo)"}</code> will run <code class="inline-code">{"foo"}</code> and place the output in a temporary file and substitute the <code class="inline-code">{"<()"}</code> with that file‚Äôs name. Example: <code class="inline-code">{"diff <(ls foo) <(ls bar)"}</code> compares the files of directory <code class="inline-code">{"foo"}</code> and <code class="inline-code">{"bar"}</code>.</p>
<h3 id="t-4" tabindex="-1" class="heading">Redirection <a class="cursor header-anchor" href="#t-4">¬∂</a></h3>
<p><strong>Input</strong>: use <code class="inline-code">{"<"}</code> to redirect input from a file.</p>
<p><strong>Output</strong>: use <code class="inline-code">{">"}</code> to redirect output to a file. Use <code class="inline-code">{">>"}</code> to append to a file.</p>
<p><strong>Error</strong>: use <code class="inline-code">{"2>"}</code> to redirect error to a file.</p>
<p><strong>Both output and error</strong>: use <code class="inline-code">{"&>"}</code> to redirect both output and error to a file.</p>
<p><strong>Both input and output</strong>: use <code class="inline-code">{"<>"}</code> to redirect both input and output to a file.</p>
<p><strong>Discard</strong>: redirect to <code class="inline-code">{"/dev/null"}</code> to discard output/error/input.</p>
<p><strong>Pipe</strong>: use <code class="inline-code">{"|"}</code> to pipe the output of a command to the input of another command.</p>
<h3 id="t-5" tabindex="-1" class="heading">Control Flow <a class="cursor header-anchor" href="#t-5">¬∂</a></h3>
<p><strong><code class="inline-code">{"If"}</code></strong>: use <code class="inline-code">{"if foo; then bar; fi"}</code> to run <code class="inline-code">{"bar"}</code> if <code class="inline-code">{"foo"}</code> succeeds. <code class="inline-code">{"foo"}</code> can be any command or a test. Refer to <code class="inline-code">{"man test"}</code> for more information about tests. Here are some simple examples:</p>
<ul>
<li><strong><code class="inline-code">{"if [[ -d foo ]];"}</code></strong>: if <code class="inline-code">{"foo"}</code> is a directory.</li>
<li><strong><code class="inline-code">{"if [[ -f foo ]];"}</code></strong>: if <code class="inline-code">{"foo"}</code> is a file.</li>
<li><strong><code class="inline-code">{"if [[ $foo -ne 0 ]];"}</code></strong>: if <code class="inline-code">{"foo"}</code> is not equal to <code class="inline-code">{"0"}</code>.</li>
<li><strong><code class="inline-code">{"if [[ $foo -gt 0 ]];"}</code></strong>: if <code class="inline-code">{"foo"}</code> is greater than <code class="inline-code">{"0"}</code>.</li>
</ul>
<p>The <code class="inline-code">{"[[ ]]"}</code> notation is syntactic sugar for the <code class="inline-code">{"test"}</code> command. The following two lines are equivalent:</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-d</span> foo <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n<span class=\"token keyword\">if</span> <span class=\"token builtin class-name\">test</span> <span class=\"token parameter variable\">-d</span> foo<span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n</code>"}></BlockCode><p><code class="inline-code">{"[[ ]]"}</code> notation provides more features than <code class="inline-code">{"test"}</code>. For example, <code class="inline-code">{"[[ ]]"}</code> supports <code class="inline-code">{"&&"}</code> and <code class="inline-code">{"||"}</code> operators, while <code class="inline-code">{"test"}</code> does not.</p>
<p><strong><code class="inline-code">{"For"}</code>, <code class="inline-code">{"While"}</code> and <code class="inline-code">{"Until"}</code></strong>:</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\"><span class=\"token comment\"># Run baz for each foo in bar</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">foo</span> <span class=\"token keyword\">in</span> bar<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> baz<span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># e.g. Print all files in the current directory</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ls</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># Run bar while foo succeeds</span>\n<span class=\"token keyword\">while</span> foo<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> bar<span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># e.g. Print \"Hello\" forever</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># Run bar until foo succeeds</span>\n<span class=\"token keyword\">until</span> foo<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> bar<span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># e.g. Print \"Hello\" forever</span>\n<span class=\"token keyword\">until</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n</code>"}></BlockCode><p><strong>Case</strong>: see the example:</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\"><span class=\"token keyword\">case</span> <span class=\"token variable\">$fruit</span> <span class=\"token keyword\">in</span>\n    apple<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"It's an apple.\"</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    banana<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"It's a banana.\"</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    orange<span class=\"token operator\">|</span>lemon<span class=\"token punctuation\">)</span> <span class=\"token comment\"># \"|\" means \"or\"</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"It's an orange or a lemon.\"</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    *<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"It's an unknown fruit.\"</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span>\n</code>"}></BlockCode><p><strong>Functions</strong>: use <code class="inline-code">{"foo() { bar; }"}</code> to define a function named <code class="inline-code">{"foo"}</code> that runs <code class="inline-code">{"bar"}</code>. Example:</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\"><span class=\"token function-name function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>$<span class=\"token number\">1</span> <span class=\"token operator\">*</span> $<span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The result of multiplication is: <span class=\"token variable\">$result</span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Call the function</span>\nmultiply <span class=\"token number\">5</span> <span class=\"token number\">3</span>\n</code>"}></BlockCode><h3 id="t-6" tabindex="-1" class="heading">Others <a class="cursor header-anchor" href="#t-6">¬∂</a></h3>
<p><strong>Shebang</strong>: use <code class="inline-code">{"#!/bin/bash"}</code> to specify the interpreter of the script. The shebang must be the first line of the script. You can also choose python as the interpreter, e.g. <code class="inline-code">{"#!/usr/bin/env python"}</code>.</p>
<p><strong>Exit code</strong>: use <code class="inline-code">{"exit 0"}</code> to exit with code <code class="inline-code">{"0"}</code>. Use <code class="inline-code">{"exit"}</code> to exit with the return code of the last command.</p>
<h3 id="t-7" tabindex="-1" class="heading">Homework <a class="cursor header-anchor" href="#t-7">¬∂</a></h3>
<blockquote>
<p>Write a command or script to recursively find the most recently modified file in a directory. More generally, can you list all files by recency?</p>
</blockquote>
<p>Here is my implementation of the first part of the homework.</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\"><span class=\"token function-name function\">__check_modified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">local</span> <span class=\"token function\">file</span>\n    <span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-t</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-n1</span><span class=\"token variable\">)</span></span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>/<span class=\"token variable\">$file</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n        <span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-t</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>/<span class=\"token variable\">$file</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-n1</span><span class=\"token variable\">)</span></span>\n    <span class=\"token keyword\">done</span>\n\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>/<span class=\"token variable\">$file</span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n__check_modified <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span>\n</code>"}></BlockCode><hr />
<h2 id="t-8" tabindex="-1" class="heading">Data Wrangling <a class="cursor header-anchor" href="#t-8">¬∂</a></h2>
<p>I don‚Äôt know how to document this part, so I just note down some useful tools.</p>
<ul>
<li><strong><code class="inline-code">{"grep"}</code></strong>: search for a pattern in a file.</li>
<li><strong><code class="inline-code">{"sed"}</code></strong>: stream editor.</li>
<li><strong><code class="inline-code">{"awk"}</code></strong>: pattern scanning and processing language.</li>
<li><strong><code class="inline-code">{"sort"}</code></strong>: sort lines of text files.</li>
<li><strong><code class="inline-code">{"uniq"}</code></strong>: report or omit repeated lines.</li>
<li><strong><code class="inline-code">{"paste"}</code></strong>: merge lines of files.</li>
<li><strong><code class="inline-code">{"wc"}</code></strong>: print newline, word, and byte counts for each file.</li>
<li><strong><code class="inline-code">{"tee"}</code></strong>: read from standard input and write to standard output and files.</li>
<li><strong><code class="inline-code">{"tr"}</code></strong>: translate or delete characters.</li>
<li><strong><code class="inline-code">{"tac"}</code></strong>: reverse <code class="inline-code">{"cat"}</code>.</li>
<li><strong><code class="inline-code">{"less"}</code></strong>: open a file for interactive reading.</li>
<li><strong><code class="inline-code">{"head"}</code></strong>: output the first part of files.</li>
<li><strong><code class="inline-code">{"tail"}</code></strong>: output the last part of files.</li>
<li><strong><code class="inline-code">{"xargs"}</code></strong>: build and execute command lines from standard input.</li>
<li><strong><code class="inline-code">{"bc"}</code></strong>: arbitrary precision calculator language.</li>
<li><strong><code class="inline-code">{"jq"}</code></strong>: command-line JSON processor.</li>
<li><strong><code class="inline-code">{"pup"}</code></strong>: command line tool for processing HTML.</li>
</ul>
<p><strong>One more thing</strong>: Learning Regex can be incredibly useful. It‚Äôs definitely worth investing time in!</p>
<hr />
<h2 id="t-9" tabindex="-1" class="heading">Command-line Environment <a class="cursor header-anchor" href="#t-9">¬∂</a></h2>
<h3 id="t-10" tabindex="-1" class="heading">Job Control <a class="cursor header-anchor" href="#t-10">¬∂</a></h3>
<p>When pressed <code class="inline-code">{"Ctrl-C"}</code>, the shell delivers a <strong>SIGINT</strong> SIGnal to the process, which <em>by default</em> INTerrupts the process.</p>
<p>This python program captures <strong>SIGINT</strong> and ignores it:</p>
<BlockCode lang="python" html={"<code class=\"language-python\"><span class=\"token keyword\">import</span> signal<span class=\"token punctuation\">,</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>signum<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nI got a SIGINT, but I am not stopping\"</span><span class=\"token punctuation\">)</span>\n\nsignal<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span>SIGINT<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># This program is a simple counter</span>\ni <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">.1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n</code>"}></BlockCode><p>When we run this program and press <code class="inline-code">{"Ctrl-C"}</code>, the program will continue to run. To stop it, we need to send a <strong>SIGQUIT</strong> signal to it, by typing <code class="inline-code">{"Ctrl-\\"}</code>.</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\">$ python sigint.py\n<span class=\"token number\">16</span>^C\nI got a SIGINT, but I am not stopping\n<span class=\"token number\">25</span>^C\nI got a SIGINT, but I am not stopping\n<span class=\"token number\">45</span>^<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>    <span class=\"token number\">54634</span> quit       python sigint.py\n</code>"}></BlockCode><p>Note that <strong>SIGINT</strong> and <strong>SIGQUIT</strong> can both be captured by the program. However, <strong>SIGTERM</strong> cannot. It is a more graceful way to TERMinate the process. To send the signal we can use <code class="inline-code">{"kill -TERM <PID>"}</code> or <code class="inline-code">{"kill <PID>"}</code> for short.</p>
<p><code class="inline-code">{"Ctrl-Z"}</code> is used to suspend a process. It sends a <strong>SIGTSTP</strong> signal, short for ‚Äúterminal stop‚Äù. When a process is suspended, it pauses.</p>
<p>Command <code class="inline-code">{"jobs"}</code> lists the unfinished jobs associated with the current terminal session. For example, if I suspended the <code class="inline-code">{"sigint.py"}</code> program above:</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\">$ python sigint.py\n<span class=\"token number\">25</span>^Z\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  + <span class=\"token number\">56852</span> suspended  python sigint.py\n$ <span class=\"token function\">jobs</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  + suspended  python sigint.py\n</code>"}></BlockCode><p>Then we can use <code class="inline-code">{"fg"}</code> to bring the job to the foreground, and <code class="inline-code">{"bg"}</code> to the background.</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\">$ <span class=\"token function\">fg</span> %1      <span class=\"token comment\"># %1 means it is the first job</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  + <span class=\"token number\">56852</span> continued  python sigint.py\n<span class=\"token number\">75</span>           <span class=\"token comment\"># Number counting continues</span>\n</code>"}></BlockCode><p>By using the <code class="inline-code">{"&"}</code> suffix, a command runs in the background but still prints to the terminal.</p>
<p>To background a program we can use <code class="inline-code">{"Ctrl-Z"}</code> and <code class="inline-code">{"bg"}</code>, but note that the process will die if you close the terminal. To prevent this, we can use <code class="inline-code">{"nohup"}</code> to run the program in the background, it sets the process to ignores <strong>SIGHUP</strong> signal, which is sent to a process when the terminal session ends.</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\">$ <span class=\"token function\">nohup</span> python sigint.py <span class=\"token operator\">&amp;</span>\n</code>"}></BlockCode><p>To get a comprehensive list of signals, check <code class="inline-code">{"man signal"}</code>.</p>
<h3 id="t-11" tabindex="-1" class="heading">Terminal Multiplexers <a class="cursor header-anchor" href="#t-11">¬∂</a></h3>
<p>Refer to <Anchor href="https://github.com/tmux/tmux/wiki">Tmux</Anchor>.</p>
<p>Here is a tutorial: <Anchor href="https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/">A Quick and Easy Guide to tmux</Anchor>.</p>
<hr />
<h2 id="t-12" tabindex="-1" class="heading">Version Control (Git) <a class="cursor header-anchor" href="#t-12">¬∂</a></h2>
<p>Here I list some useful commands that I‚Äôm not familiar with. I won‚Äôt dig into that too much.</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\">$ <span class=\"token function\">git</span> log <span class=\"token parameter variable\">--all</span> <span class=\"token parameter variable\">--graph</span> <span class=\"token parameter variable\">--decorate</span>\n$ <span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--shallow</span>\n$ <span class=\"token function\">git</span> fetch\n$ <span class=\"token function\">git</span> stash\n$ <span class=\"token function\">git</span> stash pop\n</code>"}></BlockCode><hr />
<h2 id="t-13" tabindex="-1" class="heading">Metaprogramming <a class="cursor header-anchor" href="#t-13">¬∂</a></h2>
<p>Here is an example of a simple Makefile that compiles a LaTeX document.</p>
<BlockCode lang="makefile" html={"<code class=\"language-makefile\"><span class=\"token target symbol\">paper.pdf</span><span class=\"token punctuation\">:</span> paper.tex plot-data.png\n	pdflatex paper.tex\n\n<span class=\"token target symbol\">plot-%.png</span><span class=\"token punctuation\">:</span> %.dat plot.py\n	./plot.py -i <span class=\"token variable\">$*.dat</span> -o <span class=\"token variable\">$@</span>\n</code>"}></BlockCode><hr />
<h2 id="t-14" tabindex="-1" class="heading">Security and Cryptography <a class="cursor header-anchor" href="#t-14">¬∂</a></h2>
<h3 id="t-15" tabindex="-1" class="heading">Cryptographic hash function <a class="cursor header-anchor" href="#t-15">¬∂</a></h3>
<p><strong>Cryptographic hash functions</strong> map an arbitrary length input to a fixed-length output. The general model is</p>
<BlockCode lang="plain" html={"<code>hash(value: array&lt;byte&gt;) -&gt; vector&lt;byte, N&gt;  (for some fixed N)\n</code>"}></BlockCode><p>It has the following properties:</p>
<ul>
<li><strong>Deterministic</strong>: the same input maps to the same output.</li>
<li><strong>Non-invertible</strong>: it is <em>hard</em> to find an input m such that <code class="inline-code">{"hash(m) = h"}</code> for some desired output <code class="inline-code">{"h"}</code>.</li>
<li><strong>Target collision resistant</strong>: given an input <code class="inline-code">{"m1"}</code>, it‚Äôs <em>hard</em> to find a different input <code class="inline-code">{"m2"}</code> such that <code class="inline-code">{"hash(m1) = hash(m2)"}</code>.</li>
<li><strong>Collision resistant</strong>: it‚Äôs <em>hard</em> to find two inputs <code class="inline-code">{"m1"}</code> and <code class="inline-code">{"m2"}</code> such that <code class="inline-code">{"hash(m1) = hash(m2)"}</code> (this is a strictly stronger property than target collision resistance).</li>
</ul>
<p>Note that it is <em>hard</em> to find a collision, but it is not completely <em>impossible</em>. This is why each cryptographic hash function has a <Anchor href="https://valerieaurora.org/hash.html">lifespan</Anchor>.</p>
<p>A widely used cryptographic hash function is <strong>SHA-1</strong>. For example, Git uses SHA-1 to identify commits. But it is <Anchor href="https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html">not secure anymore</Anchor>. To generate an SHA-1 hash, we can use the <code class="inline-code">{"shasum"}</code> command on macOS.</p>
<BlockCode lang="sh" html={"<code class=\"language-sh\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello, world\"</span> <span class=\"token operator\">|</span> shasum <span class=\"token parameter variable\">-a</span> <span class=\"token number\">1</span>\ncd50d19784897085a8d0e3e413f8612b097c03f1  -\n</code>"}></BlockCode><p>Imagine we‚Äôre playing a number-guessing game. I‚Äôve thought of a random number, and you‚Äôre trying to guess it. You need to share your guess before I reveal if it‚Äôs correct.</p>
<p>Now, to ensure I don‚Äôt cheat by altering the number in my mind, we can employ a cryptographic hash function. Before you make your guess, I‚Äôll share the hash of my number. After the game, you can verify that I haven‚Äôt tampered with the chosen number by checking the hash of your guessed number.</p>
<h3 id="t-16" tabindex="-1" class="heading">Key derivation function <a class="cursor header-anchor" href="#t-16">¬∂</a></h3>
<p><strong>Key derivation functions</strong>, or <strong>KDFs</strong>, share similarities with cryptographic hash functions, but they are specifically designed for deriving secret keys from a given input, typically a password or a low-entropy key. KDFs are intentionally designed to operate at a <em>slow</em> pace, making it time-consuming to brute-force the password.</p>
<p><strong>Applications</strong>:</p>
<ul>
<li>Producing keys from passphrases for use in other cryptographic algorithms (e.g. symmetric cryptography).</li>
<li>Storing login credentials. Storing plaintext passwords is bad; the right approach is to generate and store a random <Anchor href="https://en.wikipedia.org/wiki/Salt_(cryptography)">salt</Anchor> <code class="inline-code">{"salt = random()"}</code> for each user, store <code class="inline-code">{"KDF(password + salt)"}</code>, and verify login attempts by re-computing the KDF given the entered password and the stored salt.</li>
</ul>
<h3 id="t-17" tabindex="-1" class="heading">Symmetric cryptography <a class="cursor header-anchor" href="#t-17">¬∂</a></h3>
<p><strong>Symmetric cryptography</strong> is used to encrypt and decrypt data. It uses a <strong>secret key</strong> to encrypt and decrypt data. The same key is used for both encryption and decryption. The model is</p>
<BlockCode lang="plain" html={"<code>keygen() -&gt; key  (this function is randomized)\n\nencrypt(plaintext: array&lt;byte&gt;, key) -&gt; array&lt;byte&gt;  (the ciphertext)\ndecrypt(ciphertext: array&lt;byte&gt;, key) -&gt; array&lt;byte&gt;  (the plaintext)\n</code>"}></BlockCode><p>An example of a symmetric cryptosystem in wide use today is AES.</p>
<h3 id="t-18" tabindex="-1" class="heading">Asymmetric cryptography <a class="cursor header-anchor" href="#t-18">¬∂</a></h3>
<p>Except for encrypting and decrypting data, <strong>asymmetric cryptography</strong> can also be used to sign and verify data. It uses a <strong>public key</strong> and a <strong>private key</strong>. The public key is used to encrypt data and verify signatures, while the private key is used to decrypt data and sign data. The model is</p>
<BlockCode lang="plain" html={"<code>keygen() -&gt; (public-key, private-key)  (this function is randomized)\n\nencrypt(plaintext: array&lt;byte&gt;, public-key) -&gt; array&lt;byte&gt;  (the ciphertext)\ndecrypt(ciphertext: array&lt;byte&gt;, private-key) -&gt; array&lt;byte&gt;  (the plaintext)\n\nsign(message: array&lt;byte&gt;, private-key) -&gt; array&lt;byte&gt;  (the signature)\nverify(message: array&lt;byte&gt;, signature: array&lt;byte&gt;, public-key) -&gt; bool  (whether or not the signature is valid)\n</code>"}></BlockCode><p>As its name suggests, public key <em>can</em> be made public. Anyone can use the public key to encrypt data <em>for you</em>, but only you, with the corresponding private key, can decrypt it. That‚Äôs how private messaging apps like Telegram works.</p>
<p>On the flip side, you can sign data using your private key. Others can then verify the signature using your public key. This mechanism is exemplified in practices such as verifying commits in Git through digital signatures.</p>
</>)
export default jsx;
